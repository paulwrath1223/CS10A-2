// Program loop-examples.cpp provides samples of the while loop, the do-while loop, and the for loop.
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
	double num;
	char doAgain;

	// while loop
	cout << "This code uses a while loop "
	     << "controlled by an end sentinel.\n"; 
	cout << "It finds the square of any integer.\n";
	cout << "\nEnter an integer, or -99 to quit: ";
	cin  >> num;
	while (num != -99)
	{	cout << num << " squared is " << pow(num, 2.0) << endl;
		cout << "\nEnter an integer, or -99 to quit ";
		cin  >> num;
	}	
   	cout << endl;
	
	// do-while loop
	cout << "*****************************************\n";
	cout << "This code uses a do-while loop "
	     << "controlled by a Y/N User input.\n"; 
	cout << "It finds the square of any integer.\n";
	do
	{	cout << "\nEnter an integer: ";
		cin  >> num;
		cout << num << " squared is " << pow(num, 2.0) << endl;
		cout << "Do you want to square another number? (Y/N) ";
		cin  >> doAgain;
	} while (doAgain == 'Y' || doAgain == 'y');
	cout << endl;

	// for loop
	cout << "*****************************************\n";
	cout << "This code uses a for loop that loops 8 times.\n";
	cout << "It finds the squares of the integers from 1 to 8.\n\n";
  	for (num = 1; num <= 8; num++)
	{
		cout << num << " squared is " << pow(num, 2.0) << endl;
	}
	return 0;
}
/*_____________________________________________________________________

Deciding Which Loop to Use: Although most repetitive algorithms can be written with any of the three types of loops, each works best in different situations. Each of C++’s three loops are ideal to use in different situations. Here’s a short summary when each loop should be used. 

The while Loop: The while loop is a pretest loop. It is ideal in situations where you do not want the loop to iterate if the test condition is false from the beginning. For example, validating input that has been read and reading lists of data terminated by a sentinel value are good applications of the while loop. 

cout << “This program finds the square of any integer.\n”; 
cout << “\nEnter an integer, or -99 to quit: “; 
cin >> num; 
while (num !=99) 
{ 
 cout << num << “ squared is “ << pow(num, 2.0) << endl; 
 cout << “\nEnter an integer, or -99 to quit “; 
 cin >> num; 
} 

The do-while Loop: The do-while loop is a post test loop. It is ideal in situations where you always want the loop to iterate at least once. The do-while loop is a good choice for repeating a menu or for asking the user if they want to repeat a set of actions. 

cout << “This program finds the square of any integer.\n”; 
do 
{ 
 cout << “\nEnter an integer: “; 
 cin >> num; 
 cout << num << “ squared is “ << pow(num, 2.0) << endl; 
 cout << “Do you want to square another number? (Y/N) “; 
 cin >> doAgain; 
} while ((doAgain == “Y’) | | (doAgain == 'y'));
 
The for Loop: The for loop is a pretest loop with built-in expressions for initializing, testing, and updating a counter variable. The for loop is ideal in situations where the exact number of iterations is known. 

cout << “This program finds the squares of the integers" << “from 1 to 8.\n\n”; 
for (num = 1; num <= 8; num++) 
{ 
 cout << num << “ squared is ‘ << pow(num, 2.0) << endl; 
}
*/ 

