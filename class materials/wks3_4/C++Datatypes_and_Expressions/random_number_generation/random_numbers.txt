// Program 3-33 (Gaddis 9E) demonstrates using random numbers when a 
// "seed" is provided for the random number generator.
#include <iostream>
#include <cstdlib>       // Header file needed to use srand and rand
using namespace std;

int main()
{
	unsigned seed;         // Random generator seed

    // Get a "seed" value from the user
	cout << "Enter a seed value: ";
	cin  >> seed;
	
	// Set the random generator seed before calling rand()
	srand(seed); 
	
	// Now generate and print three random numbers
	cout << rand() << "      " ;
	cout << rand() << "      " ;
	cout << rand() << endl;
	return 0;
}
------------------------------------------------------------------------
// Program 3-34  (Gaddis 9E) demonstrates using the C++ time function
// to provide a "seed" for the random number generator.
#include <iostream>
#include <cstdlib>       // Header file needed to use srand and rand
#include <ctime>         // Header file needed to use time
using namespace std;

int main()
{
	unsigned seed;         // Random generator seed

    // Use the time function to get a "seed" value for srand
	seed = time(0);
	srand(seed); 
	
	// Now generate and print three random numbers
	cout << rand() << "      " ;
	cout << rand() << "      " ;
	cout << rand() << endl;

	return 0;
}
-----------------------------------------------------------------------
// This program 3-35  (Gaddis 9E) demonstrates random numbers, providing
// a "seed" calling the time function, and generating random numbers between 1 and 6.
#include <iostream>
#include <cstdlib>            // Needed to use rand() and srand()
#include <ctime>              // Needed to "seed" the random number generator
using namespace std;

int main()
{
	int num1, num2, num3;  // These hold the 3 random numbers
	unsigned seed;            // Seed for the random number generator
	int max_value = 6;

	seed = time(0);           // Assigns a system-generated seed

	// Set the random generator seed before calling rand()
	srand(seed);

	// Now generate random numbers to an integer between 1 and max_value and print three random numbers
	num1 = 1+ rand()% max_value;
	num2 = 1+ rand()% max_value;
	num3 = 1+ rand()% max_value;
	cout << num1 << "  " << num2 << "  "<<num3<<endl;

	return 0;
}
-------------------------------------------------------------------------
// This program (Pr3-25 - Gaddis 10E) simulates rolling dice.
#include <iostream>
#include <random>
using namespace std;

int main()
{
   // Constants
   const int MIN = 1;   // Minimum dice value
   const int MAX = 6;   // Maximum dice value

   // Random number engine
   random_device engine;

   // Distribution object
   uniform_int_distribution<int> diceValue(MIN, MAX);

   cout << "Rolling the dice...\n";
   cout << diceValue(engine) << endl;
   cout << diceValue(engine) << endl;
   return 0;
}

--------------------------------------------------------------------------
// This program (Pr3-25b updated - Gaddis 10E) simulates rolling dice.
#include <iostream>
#include <random>
#include <ctime>
using namespace std;

int main()
{
   // Constants
   const int MIN = 1;   // Minimum dice value
   const int MAX = 6;   // Maximum dice value


   // Random number engine
    random_device engine;

    //setting seed default random engine with call to time function
    default_random_engine eng{static_cast<long unsigned int>(time(0))};

   // Distribution object
   uniform_int_distribution<int> diceValue(MIN, MAX);

   cout << "Rolling the dice...\n";

   //cout << diceValue(engine) << endl;
   //cout << diceValue(engine) << endl;

    cout << diceValue(eng) << endl;
    cout << diceValue(eng) << endl;

   return 0;
}
-------------------------------------------------------------------------
